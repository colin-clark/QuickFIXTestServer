<project name="module" basedir="." default="">
	<description>
		This is the shared module build file for QFJ modules.
	</description>
			
	<property name="main.dir" value="src/main" />
	<property name="test.dir" value="src/test" />
	<property name="target.dir" value="target" />

	<property name="main.src.dir" value="${main.dir}/java" />
	<property name="main.resources.dir" value="${main.dir}/resources" />

	<property name="test.src.dir" value="${test.dir}/java" />
	<property name="test.resources.dir" value="${test.dir}/resources" />

	<property name="main.lib.dir" value="${main.dir}/lib" />
	<property name="main-1.4.lib.dir" value="${main.dir}/lib/java4" />
	<property name="main.optional.lib.dir" value="${main.dir}/lib/optional" />
	<property name="test.lib.dir" value="${test.dir}/lib" />

	<property name="target.classes.dir" value="${target.dir}/classes"/>
	<property name="main.classes.dir" value="${target.classes.dir}/main" />
	<property name="test.classes.dir" value="${target.classes.dir}/test" />
	<property name="jar.output.dir" value="${target.dir}" />

	<property name="javadoc.input.dir" value="${main.dir}/doc" />
	<property name="javadoc.output.dir" value="${target.dir}/doc/api" />

	<property name="test.output.dir" value="${target.dir}/test"/>
	<property name="test.report.dir" value="${target.dir}/test/reports"/>

	<available file="src/main/java" property="main.java.available"/>
	<available file="src/main/resources" property="main.resources.available"/>
	<available file="src/test/java" property="test.java.available"/>
	
	<target name="export_sources">
		<description>Export source code from a module to the staging directory.
			The root directory should be the module base.</description>
		<copy todir="${release.src.staging.dir}/${ant.project.name}" includeEmptyDirs="false">
			<fileset dir="${basedir}">
				<exclude name="target/*"/>
				<exclude name="target/**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="export_binary_src">
		<description>Export source code for binaries. This is used for associating
		sources with class files rather than being able to build the distribution from source.
		</description>
		<copy todir="${release.bin_src.staging.dir}" includeEmptyDirs="false">
			<fileset dir="${basedir}/src/main/java"/>
		</copy>
	</target>

	<target name="export_binaries">
		<description>Export files for a binary release (jars, resource, 
			javadocs) to the staging area.</description>
		<copy todir="${release.bin.staging.dir}" includeEmptyDirs="false">
			<fileset dir="target">
				<include name="*.jar" />
				<include name="doc/**/*" />
			</fileset>
		</copy>
		<antcall target="export_binaries.resources"/>
	</target>
	
	<target name="export_binaries.resources" if="main.resources.available">
		<fileset dir="${main.resources.dir}" />
    </target>
    	
	<target name="test">
		<description>Default test target</description>
	</target>
	
	<target name="javadoc">
		<description>Default javadoc target</description>
	</target>

	<target name="clean" description="clean files">
		<delete dir="target"/>
	</target>
	
	<target name="clean.classes" description="Clean the target classes">
		<delete dir="${target.classes.dir}"/>
	</target>
	
	<!-- Setting the jvm.ok property on the command line will bypass this check -->
	<target name="jvm_identification" unless="jvm.ok">
		<condition property="jvm.ok">
			<equals arg1="${ant.java.version}" arg2="1.4" />
		</condition>
	</target>

	<target name="assert_jdk14" depends="jvm_identification" unless="jvm.ok">
		<fail message="Wrong JVM - ${ant.java.version}" />
	</target>

</project>